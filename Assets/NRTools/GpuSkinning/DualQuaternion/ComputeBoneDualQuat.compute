#pragma kernel cs_main

#include "DualQuat.cginc"

struct bone_weight
{
    int bone_index0;
    int bone_index1;
    int bone_index2;
    int bone_index3;

    float bone_weight0;
    float bone_weight1;
    float bone_weight2;
    float bone_weight3;
};

RWStructuredBuffer<float4x4> pose_matrices;
float4x4 self_matrix;

RWStructuredBuffer<dual_quaternion> bind_dual_quaternions;
RWStructuredBuffer<dual_quaternion> skinned_dual_quaternions;

RWStructuredBuffer<float4> bone_directions;

float4 bone_orientation;

[numthreads(256,1,1)]
void cs_main (uint3 id : SV_DispatchThreadID)
{
    dual_quaternion dq_bind = bind_dual_quaternions.Load(id.x);
    dq_bind.translation_quaternion = quaternion_multiply(dq_bind.translation_quaternion,	dq_bind.rotation_quaternion) * 0.5;

    float4x4 pose_matrix = transpose(pose_matrices.Load(id.x));
    pose_matrix = mul(self_matrix, pose_matrix);

    const dual_quaternion dq_pose = dual_quaternion_from_matrix4_x4(pose_matrix);
    const dual_quaternion dq_skinned = dual_quaternion_multiply(dq_pose, dq_bind);

    skinned_dual_quaternions[id.x].rotation_quaternion		= dq_skinned.rotation_quaternion;
    skinned_dual_quaternions[id.x].translation_quaternion	= dq_skinned.translation_quaternion;
	
    bone_directions[id.x] = quaternion_apply_rotation(bone_orientation, dq_pose.rotation_quaternion);
}